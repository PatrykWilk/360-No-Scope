{"version":3,"file":"view360.spinviewer.js","sources":["../../src/utils/browser.js","../../src/utils/browserFeature.js","../../src/version.js","../../src/SpinViewer/SpriteImage.js","../../src/SpinViewer/SpinViewer.js"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable no-new-func, no-nested-ternary */\nconst win = typeof window !== \"undefined\" && window.Math === Math ? window : typeof self !== \"undefined\" && self.Math === Math ? self : Function(\"return this\")();\n/* eslint-enable no-new-func, no-nested-ternary */\n\nconst doc = win.document;\n\nexport {\n\twin as window,\n\tdoc as document\n};\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport {window as win, document as doc} from \"./browser\";\n\nwin.Float32Array = (typeof win.Float32Array !== \"undefined\") ? win.Float32Array : win.Array;\n\nconst Float32Array = win.Float32Array;\nconst getComputedStyle = win.getComputedStyle;\nconst userAgent = win.navigator.userAgent;\nconst SUPPORT_TOUCH = \"ontouchstart\" in win;\nconst SUPPORT_DEVICEMOTION = \"ondevicemotion\" in win;\nconst DeviceMotionEvent = win.DeviceMotionEvent;\nconst devicePixelRatio = win.devicePixelRatio;\n\nconst TRANSFORM = (function() {\n\tconst docStyle = doc.documentElement.style;\n\tconst target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\n\tfor (let i = 0, len = target.length; i < len; i++) {\n\t\tif (target[i] in docStyle) {\n\t\t\treturn target[i];\n\t\t}\n\t}\n\treturn \"\";\n})();\n\n// check for will-change support\nconst SUPPORT_WILLCHANGE = win.CSS && win.CSS.supports &&\n\twin.CSS.supports(\"will-change\", \"transform\");\n\nexport {\n\tFloat32Array,\n\tgetComputedStyle,\n\tuserAgent,\n\tTRANSFORM,\n\tSUPPORT_TOUCH,\n\tSUPPORT_DEVICEMOTION,\n\tSUPPORT_WILLCHANGE,\n\tDeviceMotionEvent,\n\tdevicePixelRatio\n};\n\n","const VERSION = \"#__VERSION__#\";\n\nexport {\n\tVERSION\n};\n","import Component from \"@egjs/component\";\nimport {TRANSFORM, SUPPORT_WILLCHANGE} from \"../utils/browserFeature\";\nimport {VERSION} from \"../version\";\n/**\n * @class eg.view360.SpriteImage\n * @classdesc A module that displays a single or continuous image of any one of the \"sprite images\". SpinViewer internally uses SpriteImage to show each frame of the sprite image.\n * @ko 스프라이트 이미지 중 임의의 한 프레임을 단발성 혹은 연속적으로 보여주는 컴포넌트입니다. SpinViewer 는 내부적으로 SpriteImage 를 사용하여 스프라이트 이미지의 각 프레임을 보여줍니다.\n * @extends eg.Component\n *\n * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n * @param {Object} options The option object<ko>파라미터 객체</ko>\n * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n * @param {Number} [options.frameIndex=0] frameIndex specifies the index of the frame to be displayed in the \"Sprite image\". The frameIndex order is zero-based and indexed in Z form (left-to-right, top-to-bottom, and newline again from left to right).<br>- colRow is equivalent to frameIndex. However, if colRow is specified at the same time, colRow takes precedence.<ko>스프라이트 이미지 중에서 보여질 프레임의 인덱스를 지정합니다. frameIndex 순서는 0부터 시작하며 Z 형태(왼쪽에서 오른쪽, 위에서 아래, 개행 시 다시 왼쪽 부터)로 인덱싱합니다.<br>- colRow 는 frameIndex 와 동일한 기능을 합니다. 단, colRow 가 동시에 지정된 경우 colRow 가 우선합니다.</ko>\n * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n *\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // Initialize SpriteImage\n *\n * var el = document.getElementById(\"image-div\");\n * var sprites = new eg.view360.SpriteImage(el, {\n * \timageUrl: \"/img/bag360.jpg\", // required\n * \trowCount: 24\n * });\n */\nexport default class SpriteImage extends Component {\n\tstatic VERSION = VERSION;\n\tconstructor(element, options) {\n\t\tsuper();\n\t\tconst opt = options || {};\n\n\t\tthis._el = element;\n\t\tthis._rowCount = opt.rowCount || 1;\n\t\tthis._colCount = opt.colCount || 1;\n\t\tthis._totalCount = this._rowCount * this._colCount;// total frames\n\t\tthis._width = opt.width || \"auto\";\n\t\tthis._height = opt.height || \"auto\";\n\t\tthis._autoHeight = opt.autoHeight != null ? opt.autoHeight : \"true\"; // If autoHeight is specified, _height will be overwritten.\n\t\tthis._colRow = [0, 0];\n\n\t\tif (opt.colRow) {\n\t\t\tthis._colRow = opt.colRow;\n\t\t} else if (opt.frameIndex) {\n\t\t\tthis.setFrameIndex(opt.frameIndex);\n\t\t}\n\n\t\tthis._el.style.width = SpriteImage._getSizeString(this._width);\n\t\tthis._el.style.height = SpriteImage._getSizeString(this._height);\n\n\t\tif (!opt.imageUrl) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.trigger(\"imageError\", {\n\t\t\t\t\timageUrl: opt.imageUrl\n\t\t\t\t});\n\t\t\t}, 0);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._image = new Image();\n\t\t/**\n\t\t * Event\n\t\t */\n\t\tthis._image.onload = () => {\n\t\t\tthis._bg = SpriteImage._createBgDiv(\n\t\t\t\tthis._image, this._rowCount, this._colCount, this._autoHeight);\n\t\t\tthis._el.appendChild(this._bg);\n\t\t\tthis.setColRow(this._colRow[0], this._colRow[1]);\n\n\t\t\t/**\n\t\t\t * Events that occur when component loading is complete\n\t\t\t * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n\t\t\t * @name eg.view360.SpriteImage#load\n\t\t\t * @event\n\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n\t\t\t * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n\t\t\t *\n\t\t\t * @example\n\t\t\t *\n\t\t\t * sprites.on({\n\t\t\t *\t\"load\" : function(evt) {\n\t\t\t *\t\tconsole.log(\"load event fired - e.target\", e.target, \"e.bgElement\", e.bgElement);\n\t\t\t *\t}\n\t\t\t * });\n\t\t\t */\n\t\t\tthis.trigger(\"load\", {\n\t\t\t\ttarget: this._el,\n\t\t\t\tbgElement: this._bg\n\t\t\t});\n\n\t\t\tif (this._autoPlayReservedInfo) {\n\t\t\t\tthis.play(this._autoPlayReservedInfo);\n\t\t\t\tthis._autoPlayReservedInfo = null;\n\t\t\t}\n\t\t};\n\n\t\tthis._image.onerror = e => {\n\t\t\t/**\n\t\t\t * An event that occurs when the image index is changed by the user's left / right panning\n\t\t\t * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n\t\t\t * @name eg.view360.SpriteImage#imageError\n\t\t\t * @event\n\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n\t\t\t *\n\t\t\t * @example\n\t\t\t *\n\t\t\t * sprites.on({\n\t\t\t *\t\"imageError\" : function(evt) {\n\t\t\t *\t\t// Error handling\n\t\t\t *\t\tconsole.log(e.imageUrl);\n\t\t\t *\t}\n\t\t\t * });\n\t\t\t */\n\t\t\tthis.trigger(\"imageError\", {\n\t\t\t\timageUrl: opt.imageUrl\n\t\t\t});\n\t\t};\n\n\t\tthis._image.src = opt.imageUrl;\n\t}\n\n\tstatic _createBgDiv(img, rowCount, colCount, autoHeight) {\n\t\tconst el = document.createElement(\"div\");\n\n\t\tel.style.position = \"relative\";\n\t\tel.style.overflow = \"hidden\";\n\n\t\timg.style.position = \"absolute\";\n\t\timg.style.width = `${colCount * 100}%`;\n\t\timg.style.height = `${rowCount * 100}%`;\n\t\t/** Prevent image from being dragged on IE10, IE11, Safari especially */\n\t\timg.ondragstart = () => (false); // img.style.pointerEvents = \"none\";\n\t\t// Use hardware accelerator if available\n\t\tSUPPORT_WILLCHANGE && (img.style.willChange = \"transform\");\n\n\t\tel.appendChild(img);\n\n\t\tconst unitWidth = img.width / colCount;\n\t\tconst unitHeight = img.height / rowCount;\n\n\t\tif (autoHeight) {\n\t\t\tconst r = unitHeight / unitWidth;\n\n\t\t\tel.style.paddingBottom = `${r * 100}%`;\n\t\t} else {\n\t\t\tel.style.height = \"100%\";\n\t\t}\n\n\t\treturn el;\n\t}\n\n\t/**\n\t * Specifies the frameIndex of the frame to be shown in the sprite image.\n\t * @ko 스프라이트 이미지 중 보여질 프레임의 frameIndex 값을 지정\n\t * @method eg.view360.SpriteImage#setFrameIndex\n\t * @param {Number} frameIndex frame index of a frame<ko>프레임의 인덱스</ko>\n\t *\n\t * @example\n\t *\n\t * sprites.setFrameIndex(0, 1);// col = 0, row = 1\n\t */\n\tsetFrameIndex(index) {\n\t\tconst colRow = this.toColRow(index);\n\n\t\tthis.setColRow(colRow[0], colRow[1]);\n\t}\n\n\t/**\n\t * Returns the frameIndex of the frame to be shown in the sprite image.\n\t * @ko 스프라이트 이미지 중 보여지는 프레임의 index 값을 반환\n\t * @method eg.view360.SpriteImage#getFrameIndex\n\t * @return {Number} frame index <ko>frame 인덱스</ko>\n\t *\n\t * @example\n\t *\n\t * var frameIndex = sprites.getFrameIndex(); // eg. frameIndex = 1\n\t *\n\t */\n\tgetFrameIndex() {\n\t\treturn this._colRow[1] * this._colCount + this._colRow[0];\n\t}\n\n\t/**\n\t * Specifies the col and row values of the frame to be shown in the sprite image.\n\t * @ko 스프라이트 이미지 중 보여질 프레임의 col, row 값을 지정\n\t * @method eg.view360.SpriteImage#setColRow\n\t * @param {Number} col Column number of a frame<ko>프레임의 행값</ko>\n\t * @param {Number} row Row number of a frame<ko>프레임의 열값</ko>\n\t *\n\t * @example\n\t *\n\t * sprites.setlColRow(1, 2); // col = 1, row = 2\n\t */\n\tsetColRow(col, row) {\n\t\tif (row > this._rowCount - 1 || col > this._colCount - 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._image && TRANSFORM) {\n\t\t\t// NOTE: Currently, do not apply translate3D for using layer hack. Do we need layer hack for old browser?\n\t\t\tthis._image.style[TRANSFORM] = `translate(${-(col / this._colCount * 100)}%, ${-(row / this._rowCount * 100)}%)`;\n\t\t}\n\n\t\tthis._colRow = [col, row];\n\t}\n\n\t/**\n\t * Returns the col and row values of the frame to be shown in the sprite image.\n\t * @ko 스프라이트 이미지 중 보여지는 프레임의 col, row 값을환반환\n\t * @method eg.view360.SpriteImage#gelColRow\n\t * @return {Number[]} Array containing col, row<ko>col, row 정보를 담는 배열</ko>\n\t *\n\t * @example\n\t *\n\t * var colRow = sprites.getlColRow();\n\t * // colRow = [1, 2] - index of col is 1, index of row is 2\n\t *\n\t */\n\tgetColRow() {\n\t\treturn this._colRow;\n\t}\n\n\tstatic _getSizeString(size) {\n\t\tif (typeof size === \"number\") {\n\t\t\treturn `${size}px`;\n\t\t}\n\n\t\treturn size;\n\t}\n\n\t/**\n\t * Stop playing\n\t * @ko play 되고 있던 프레임 재생을 중지합니다.\n\t * @method eg.view360.SpriteImage#stop\n\t *\n\t * @example\n\t *\n\t * viewer.stop();\n\t *\n\t */\n\tstop() {\n\t\tif (this._autoPlayTimer) {\n\t\t\tclearInterval(this._autoPlayTimer);\n\t\t\tthis._autoPlayTimer = null;\n\t\t}\n\t}\n\n\t/**\n\t * Switches frames sequentially in the 'interval' starting from the currently displayed frame and plays all frames by 'playCount'.\n\t * @ko 현재 보여지고 있는 프레임을 시작으로 'interval' 간격으로 순차적으로 프레임을 전환하며 모든 프레임을 'playCount' 만큼 재생한다.\n\t * @method eg.view360.SpriteImage#play\n\t * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n\t * @param {Number} [param.interval=1000 / totalFrameCount] Interframe Interval - in milliseconds<ko>프레임간 간격 - 밀리세컨드 단위</ko>\n\t * @param {Number} [param.playCount=0] PlayCount = 1 in which all frames are reproduced once, and playCount = n in which all frames are repeated n times. playCount = 0 in which all frames are repeated infinitely<ko>모든 프레임을 1회씩 재생한 것이 playCount = 1, 모든 프레임을 n 회 재상한 것이 playCount = n 이 된다. 0 dms 무한반복</ko>\n\t *\n\t * @example\n\t *\n\t * viewer.play({angle: 16, playCount: 1});\n\t *\n\t */\n\tplay({interval, playCount} = {interval: 1000 / this._totalCount, playCount: 0}) {\n\t\tif (!this._bg) {\n\t\t\tthis._autoPlayReservedInfo = {interval, playCount};\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._autoPlayTimer) {\n\t\t\tclearInterval(this._autoPlayTimer);\n\t\t\tthis._autoPlayTimer = null;\n\t\t}\n\n\t\tlet frameIndex = this.getFrameIndex();\n\t\tlet count = 0;\n\t\tlet frameCount = 0; // for checking 1 cycle\n\n\t\tthis._autoPlayTimer = setInterval(() => {\n\t\t\tframeIndex %= this._totalCount;\n\t\t\tconst colRow = this.toColRow(frameIndex);\n\n\t\t\tthis.setColRow(colRow[0], colRow[1]);\n\t\t\tframeIndex++;\n\n\t\t\t// Done 1 Cycle?\n\t\t\tif (++frameCount === this._totalCount) {\n\t\t\t\tframeCount = 0;\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tif (playCount > 0 && count === playCount) {\n\t\t\t\tclearInterval(this._autoPlayTimer);\n\t\t\t}\n\t\t}, interval);\n\t}\n\n\ttoColRow(frameIndex) {\n\t\tconst colCount = this._colCount;\n\t\tconst rowCount = this._rowCount;\n\n\t\tif (frameIndex < 0) {\n\t\t\treturn [0, 0];\n\t\t} else if (frameIndex >= this._totalCount) {\n\t\t\treturn [colCount - 1, rowCount - 1];\n\t\t}\n\n\t\tconst col = frameIndex % colCount;\n\t\tconst row = Math.floor(frameIndex / colCount);\n\n\t\t// console.log(frameIndex, col, row);\n\t\treturn [col, row];\n\t}\n}\n","import Component from \"@egjs/component\";\nimport Axes, {PanInput} from \"@egjs/axes\";\nimport SpriteImage from \"./SpriteImage\";\nimport {VERSION} from \"../version\";\n\nconst DEFAULT_PAN_SCALE = 0.21;\n\n/**\n * @class eg.view360.SpinViewer\n * @classdesc A module used to displays each image sequentially according to the direction of the user's touch movement (left / right) of the sprite image that is collected by rotating the object.\n * @ko 물체 주위를 회전하여 촬영한 이미지들을 모은 스프라이트 이미지를 사용자의 터치 이동 방향(좌 / 우) 에 따라 각 이미지들을 순차적으로 보여주는 컴포넌트입니다.\n * @extends eg.Component\n *\n * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n * @param {Object} options The option object<ko>파라미터 객체</ko>\n * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n * @example\n *\n * // Initialize SpinViewer\n * var el = document.getElementById(\"product-360\");\n * var viewer = new eg.view360.SpinViewer(el, {\n * \timageUrl: \"/img/bag360.jpg\", // required\n * \trowCount: 24 //required\n * });\n */\nexport default class SpinViewer extends Component {\n\t/**\n\t * Version info string\n\t * @ko 버전정보 문자열\n\t * @name VERSION\n\t * @static\n\t * @type {String}\n\t * @example\n\t * eg.view360.SpinViewer.VERSION;  // ex) 3.0.1\n\t * @memberof eg.view360.SpinViewer\n\t */\n\tstatic VERSION = VERSION;\n\tconstructor(element, options) {\n\t\tsuper();\n\n\t\tthis._el = element;\n\n\t\tconst opt = Object.assign({}, options);\n\t\tconst colCount = opt.colCount || 1;\n\t\tconst rowCount = opt.rowCount || 1;\n\n\t\tthis._scale = (opt.scale || 1);\n\t\tthis._panScale = this._scale * DEFAULT_PAN_SCALE;\n\n\t\tthis._frameCount = colCount * rowCount;\n\n\t\t// Init SpriteImage\n\t\tthis._sprites = new SpriteImage(element, opt).on({\n\t\t\t\"load\": evt => {\n\t\t\t\t/**\n\t\t\t\t * Events that occur when component loading is complete\n\t\t\t\t * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n\t\t\t\t * @name eg.view360.SpinViewer#load\n\t\t\t\t * @event\n\t\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t\t * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n\t\t\t\t * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n\t\t\t\t *\n\t\t\t\t * @example\n\t\t\t\t *\n\t\t\t\t * viwer.on({\n\t\t\t\t *\t\"load\" : function(evt) {\n\t\t\t\t *\t\tthis.spinBy(360, {duration: 300});\n\t\t\t\t *\t}\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\tthis.trigger(\"load\", evt);\n\t\t\t},\n\t\t\t\"imageError\": evt => {\n\t\t\t\t/**\n\t\t\t\t * An event that occurs when the image index is changed by the user's left / right panning\n\t\t\t\t * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n\t\t\t\t * @name eg.view360.SpinViewer#imageError\n\t\t\t\t * @event\n\t\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t\t * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n\t\t\t\t *\n\t\t\t\t * @example\n\t\t\t\t *\n\t\t\t\t * viewer.on({\n\t\t\t\t *\t\"imageError\" : function(evt) {\n\t\t\t\t *\t\t// Error handling\n\t\t\t\t *\t\tconsole.log(e.imageUrl);\n\t\t\t\t *\t}\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\tthis.trigger(\"imageError\", {\n\t\t\t\t\timageUrl: evt.imageUrl\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Init Axes\n\t\tthis._panInput = new PanInput(this._el, {\n\t\t\tscale: [this._panScale, this._panScale]\n\t\t});\n\t\tthis._axes = new Axes({\n\t\t\tangle: {\n\t\t\t\trange: [0, 359],\n\t\t\t\tcircular: true\n\t\t\t}\n\t\t}).on({\n\t\t\t\"change\": evt => {\n\t\t\t\tconst curr = Math.floor(evt.pos.angle / (360 / this._frameCount));\n\t\t\t\tconst frameIndex = this._frameCount - curr - 1;\n\n\t\t\t\tthis._sprites.setFrameIndex(frameIndex);\n\n\t\t\t\t/**\n\t\t\t\t * An event that occurs when the image index is changed by the user's left / right panning\n\t\t\t\t * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n\t\t\t\t * @name eg.view360.SpinViewer#change\n\t\t\t\t * @event\n\t\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t\t * @param {Number[]} param.colRow Column, row of the frame in the sprite image <ko>스프라이트 이미지 내 프레임의 column, row</ko>\n\t\t\t\t * @param {Number} param.frameIndex Index value that is sequentially appended in Z direction based on col and row.<ko>col, row 를 기반으로 Z 방향으로 순차적으로 붙여지는 index 값</ko>\n\t\t\t\t * @param {Number} param.angle The angle that is currently internally held at an angle between 0 and 359. (not a real product angle) <ko>0 ~ 359 범위의 각도로 현재 내부적으로 유지하고 있는 각도 (실제 이미지의 각도가 아님)</ko>\n\t\t\t\t *\n\t\t\t\t * @example\n\t\t\t\t *\n\t\t\t\t * viwer.on({\n\t\t\t\t *\t\"change\" : function(evt) {\n\t\t\t\t *\t\tconsole.log(event.frameIndex, event.colRow, event.angle);   // event.colRow = [0, 4] event.frameIndex = 4, event = 30\n\t\t\t\t *\t}\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\tthis.trigger(\"change\", {\n\t\t\t\t\tframeIndex,\n\t\t\t\t\tcolRow: this._sprites.getColRow(),\n\t\t\t\t\tangle: evt.pos.angle\n\t\t\t\t});\n\t\t\t},\n\t\t\t\"animationEnd\": evt => {\n\t\t\t\t/**\n\t\t\t\t * This event is fired when animation ends.\n\t\t\t\t * @ko 에니메이션이 끝났을 때 발생하는 이벤트\n\t\t\t\t * @name eg.view360.SpinViewer#animationEnd\n\t\t\t\t * @event\n\t\t\t\t * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n\t\t\t\t * @param {Boolean} param.isTrusted true if an event was generated by the user action, or false if it was caused by a script or API call<ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n\t\t\t\t *\n\t\t\t\t * @example\n\t\t\t\t *\n\t\t\t\t * viwer.on({\n\t\t\t\t *\t\"animationEnd\" : function(evt) {\n\t\t\t\t *\t\t// evt.isTrusted === true or false\n\t\t\t\t *\t}\n\t\t\t\t * });\n\t\t\t\t */\n\t\t\t\tthis.trigger(\"animationEnd\", {\n\t\t\t\t\tisTrusted: evt.isTrusted\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tthis._axes.connect(\"angle\", this._panInput);\n\t}\n\n\t/**\n\t * Set spin scale\n\t * @ko scale 을 조정할 수 있는 함수\n\t * @method eg.view360.SpinViewer#setScale\n\t * @param {Number} scale Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n\t *\n\t * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n\t *\n\t * @example\n\t *\n\t * viewer.setScale(2);// It moves twice as much.\n\t */\n\tsetScale(scale) {\n\t\tif (isNaN(scale) || scale < 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._scale = scale;\n\t\tthis._panScale = scale * DEFAULT_PAN_SCALE;\n\t\tthis._panInput.options.scale = [this._panScale, this._panScale];\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get spin scale\n\t * @ko scale 값을 반환한다.\n\t * @method eg.view360.SpinViewer#getScale\n\t *\n\t * @return {Number} Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n\t *\n\t * @example\n\t *\n\t * viewer.getScale();// It returns number\n\t */\n\tgetScale() {\n\t\treturn this._scale;\n\t}\n\n\t/**\n\t * It gives the effect of rotating for a certain duration by the specified angle based on the current rotation angle.\n\t * @ko 현재 회전 각도를 기준으로 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n\t * @method eg.view360.SpinViewer#spinBy\n\t *\n\t * @param {Number} [angle = 0] angle<ko>상대적 회전 각도</ko>\n\t * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n\t * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n\t *\n\t * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n\t *\n\t * @example\n\t *\n\t * viewer.spinBy(720, {duration: 500});\n\t */\n\tspinBy(angle = 0, param = {duration: 0}) {\n\t\tthis._axes.setBy({angle}, param.duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * It gives the effect of rotating for a certain duration (duration) by the specified angle (angle).\n\t * @ko 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n\t * @method eg.view360.SpinViewer#spinTo\n\t *\n\t * @param {Number} [angle = 0] angle<ko>회전 각도</ko>\n\t * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n\t * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n\t *\n\t * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n\t *\n\t * @example\n\t *\n\t * viewer.spinTo(30, {duration:100});\n\t */\n\tspinTo(angle = 0, param = {duration: 0}) {\n\t\tthis._axes.setTo({angle}, param.duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns current angles\n\t * @ko 현재 각도를 반환한다.\n\t *\n\t * @return {Number} Current angle <ko>현재 각도</ko>\n\t */\n\tgetAngle() {\n\t\treturn this._axes.get().angle || 0;\n\t}\n}\n"],"names":["win","window","Math","self","Function","doc","document","Float32Array","Array","getComputedStyle","userAgent","navigator","DeviceMotionEvent","devicePixelRatio","TRANSFORM","docStyle","documentElement","style","target","i","len","length","SUPPORT_WILLCHANGE","CSS","supports","VERSION","SpriteImage","element","options","opt","_el","_rowCount","rowCount","_colCount","colCount","_totalCount","_width","width","_height","height","_autoHeight","autoHeight","_colRow","colRow","frameIndex","setFrameIndex","_getSizeString","imageUrl","setTimeout","trigger","_image","Image","onload","_bg","_createBgDiv","appendChild","setColRow","bgElement","_autoPlayReservedInfo","play","onerror","e","src","img","el","createElement","position","overflow","ondragstart","willChange","unitWidth","unitHeight","r","paddingBottom","index","toColRow","getFrameIndex","col","row","getColRow","size","stop","_autoPlayTimer","clearInterval","interval","playCount","count","frameCount","setInterval","floor","Component","DEFAULT_PAN_SCALE","SpinViewer","_scale","scale","_panScale","_frameCount","_sprites","on","evt","_panInput","PanInput","_axes","Axes","angle","range","circular","curr","pos","isTrusted","connect","setScale","isNaN","getScale","spinBy","param","duration","setBy","spinTo","setTo","getAngle","get"],"mappings":"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"}