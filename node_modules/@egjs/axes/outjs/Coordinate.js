export function getInsidePosition(destPos, range, circular, bounce) {
    var toDestPos = destPos;
    var targetRange = [
        circular[0] ? range[0] : (bounce ? range[0] - bounce[0] : range[0]),
        circular[1] ? range[1] : (bounce ? range[1] + bounce[1] : range[1]),
    ];
    toDestPos = Math.max(targetRange[0], toDestPos);
    toDestPos = Math.min(targetRange[1], toDestPos);
    return +toDestPos.toFixed(5);
}
// determine outside
export function isOutside(pos, range) {
    return pos < range[0] || pos > range[1];
}
export function getDuration(distance, deceleration) {
    var duration = Math.sqrt(distance / deceleration * 2);
    // when duration is under 100, then value is zero
    return duration < 100 ? 0 : duration;
}
export function isCircularable(destPos, range, circular) {
    return (circular[1] && destPos > range[1]) ||
        (circular[0] && destPos < range[0]);
}
export function getCirculatedPos(pos, range, circular) {
    var toPos = pos;
    var min = range[0];
    var max = range[1];
    var length = max - min;
    if (circular[1] && pos > max) { // right
        toPos = (toPos - max) % length + min;
    }
    if (circular[0] && pos < min) { // left
        toPos = (toPos - min) % length + max;
    }
    return +toPos.toFixed(5);
}
//# sourceMappingURL=Coordinate.js.map